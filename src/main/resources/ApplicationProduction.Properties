# Spring Boot Configuration for Production
# =======================================

# Server settings
# ---------------
server.port=8443  # Assuming HTTPS, change to 80 for HTTP if necessary
server.servlet.context-path=/

# Spring Data JPA & Hibernate Configuration
# -----------------------------------------
spring.jpa.hibernate.ddl-auto=none  # In production, we do not want to auto-update schema
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.show-sql=false
spring.jpa.open-in-view=false  # For performance reasons, keep disabled

# Database Configuration (PostgreSQL example)
# -------------------------------------------
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Connection Pool
# ------------------------
spring.datasource.hikari.maximum-pool-size=20  # Increase for production load
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.idle-timeout=600000  # 10 minutes
spring.datasource.hikari.connection-timeout=30000  # 30 seconds
spring.datasource.hikari.max-lifetime=1800000  # 30 minutes

# JPA Auditing
# ------------
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Caching with Redis
# ------------------
spring.cache.type=redis
spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}
spring.redis.password=${REDIS_PASSWORD}

# Spring Security
# ---------------
# No default users in production, authentication should be managed externally

# JWT Configuration
# -----------------
jwt.secret=${JWT_SECRET}
jwt.expiration=3600000  # 1 hour for production, can be adjusted

# Logging Configuration
# ---------------------
logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.com.payup=INFO  # Adjust for your application's package
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.file.name=/var/log/payup/payup.log  # Assuming a Linux server path

# Mail Configuration (if using email for notifications)
# -----------------------------------------------------
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Swagger Configuration
# ---------------------
# Disable Swagger in production for security reasons
springdoc.api-docs.enabled=false
springdoc.swagger-ui.enabled=false

# Actuator Configuration
# ----------------------
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=never
management.endpoint.health.probes.enabled=true

# CORS configuration
# ------------------
# CORS should be very restrictive in production, or handled by a reverse proxy
#cors.allowed-origins=https://your-production-domain.com
#cors.allowed-methods=GET,POST
#cors.allowed-headers=Content-Type,Authorization
#cors.allow-credentials=false

# Custom Properties
# -----------------
# Placeholder for custom configurations
custom.property.example=${CUSTOM_PROPERTY}

# Additional Security Headers
# ---------------------------
# These should be set by your web server, but if needed:
#server.http.headers.content-security-policy=default-src 'self'
#server.http.headers.x-frame-options=DENY
#server.http.headers.x-content-type-options=nosniff
#server.http.headers.referrer-policy=no-referrer
#server.http.headers.strict-transport-security=max-age=31536000; includeSubDomains

# SSL/TLS Configuration
# ---------------------
# Assuming SSL is handled by a reverse proxy or load balancer
#server.ssl.enabled=true
#server.ssl.key-store-type=PKCS12
#server.ssl.key-store=classpath:keystore.p12
#server.ssl.key-store-password=${KEYSTORE_PASSWORD}
#server.ssl.key-alias=tomcat

# Session Management
# ------------------
# In production, JWT should be used for stateless sessions, but if sessions are needed:
#server.servlet.session.timeout=1800  # 30 minutes

# Application Specific
# --------------------
# Any application-specific settings or overrides for production